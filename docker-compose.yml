services:

  # Python backend container
  python_service:
    container_name: container-python
    networks:
      - default
    # Do NOT fall back to building from scratch if image does not exist
    # ^ might revert, but compose will only use prod for now
    image: dsci-cap-img-python-prod:latest
    volumes:
      - ./pyproject.toml:/pipeline/pyproject.toml:ro   # change settings locally = applied instantly with no rebuild

  # Blazor server container, exposes port for HTTP and REST
  blazor_service:
    container_name: container-blazor
    networks:
      - default
    # Do NOT fall back to building from scratch if image does not exist
    # ^ might revert, but compose will only use prod for now
    image: dsci-cap-img-blazor-prod:latest
    environment:
      - DOTNET_ENVIRONMENT=Docker
    ports:
      - "5055:5055"


  # Meta-service to orchestrate all DB containers at once
  databases_service:
    container_name: container-databases
    image: alpine   # extremely small OS
    command: ["sleep", "infinity"]
    depends_on:
      - mysql_service
      - postgres_service  # redundant with mysql but no downside - use makefile to launch only one
      - mongo_service
      - neo4j_service
      

  # MySQL container, volume persists data, port optional
  mysql_service:
    container_name: container-mysql
    networks:      # DB containers will listen on this hostname for convenient access
      default:     # attach to our docker network
        aliases:   # does not replace service_name
          - databases_service
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}  # not typically used, but required by MySQL installation
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${MYSQL_USERNAME}  # problem: cannot be root
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql   # named volume for persistent DB data
      - ./db/init_mysql.sh:/docker-entrypoint-initdb.d/init_mysql.sh:ro  # bind mount for init script
    ports:
      - "3306:3306"

  # Postgres container, volume persists data, port optional
  postgres_service:
    container_name: container-postgres
    networks:      # DB containers will listen on this hostname for convenient access
      default:     # attach to our docker network
        aliases:   # does not replace service_name
          - databases_service
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data   # named volume for persistent DB data
      - ./db/init_postgres.sh:/docker-entrypoint-initdb.d/init_postgres.sh:ro  # bind mount for init script
    ports:
      - "5432:5432"

  # MongoDB container, volume persists data, port optional
  mongo_service:
    container_name: container-mongo
    networks:      # DB containers will listen on this hostname for convenient access
      default:     # attach to our docker network
        aliases:   # does not replace service_name
          - databases_service
    image: mongo:6
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${DB_NAME}
    volumes:
      - mongo_data:/data/db   # named volume for persistent DB data
      - ./db/init_mongo.sh:/docker-entrypoint-initdb.d/init_mongo.sh:ro  # bind mount for init script
    ports:
      - "27017:27017"
    command: ["--quiet"]   # clean docker logs, but still very messy / unreadable

  # Neo4j container, exposes HTTP and Bolt ports for UI and app connections
  neo4j_service:
    container_name: container-neo4j
    networks:      # DB containers will listen on this hostname for convenient access
      default:     # attach to our docker network
        aliases:   # does not replace service_name
          - databases_service
    image: neo4j:5
    volumes:
      - neo4j_data:/data
      - ./db/init_neo4j.sh:/init_neo4j.sh
    ports:
      - "0.0.0.0:7474:7474"   # HTTP web UI
      - "0.0.0.0:7687:7687"   # Bolt protocol for queries
    entrypoint: ["/bin/sh", "/init_neo4j.sh"]    # Change entrypoint to init script (note: env values no longer propagate to neo4j automatically)
    command: ["${NEO4J_USERNAME}", "${NEO4J_PASSWORD}"]   # Provide .env credentials as args to the init script


volumes:
  mysql_data:
  postgres_data:
  mongo_data:
  neo4j_data:


networks:  # declare our docker network globally
  default:
    name: capstone_default    # otherwise docker will auto-generate the name as "<parent_folder> + _default"