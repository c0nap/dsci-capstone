name: Build Job
on:
  workflow_call:
    inputs:
      private-namespace:
        required: true
        type: string
      image-tag:
        required: true
        type: string

jobs:
  update-dev-images:
    runs-on: ubuntu-latest
    steps:
      - name: Initial setup
        run: echo "Deploying to ${{ inputs.private-namespace }} with image tag ${{ inputs.image-tag }}"

      # Speed up build process with Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-


      # 1. Get public Docker images
      # Start from a checkpoint to speed up the build process.
      # Automatically retagged as "dev"
      - name: Pull last successful Docker images
        run: make docker-pull || true  # true in case images dont exist yet

      
      # 2. Set up environment with latest source code
      - name: Download code from repository
        uses: actions/checkout@v4

      - name: Create secrets files with fake credentials
        run: |
          make env-dummy OUT=".env"
          make appsettings-dummy OUT="web-app/BlazorApp/appsettings.json" ENVF=".env"

      
      # 3. Update the local Docker images with latest code
      # This creates the images with baked-in .env and appsettings.json files.
      # gha = GitHub Actions, matches ANY suitable image layer regardless of image name.
      - name: Build new Docker images
        run: make docker-build-dev CACHE_ARGS="--cache-from type=gha --cache-to type=gha,mode=max"


      # 4. Send these images over to the main CI/CD workflow
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Push images to a private GHCR namespace
        if: success()
        run: make docker-push-dev DEVTAG=${{ inputs.image-tag }}

