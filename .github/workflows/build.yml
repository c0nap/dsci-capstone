name: Build Job
on:
  workflow_call:
    inputs:
      image-tag:
        required: true
        type: string
    outputs:
      artifact:
        value: ${{ jobs.update-images.outputs.artifact }}
      secrets:
        value: ${{ jobs.update-images.outputs.secrets }}

jobs:
  update-images:
    runs-on: ubuntu-latest
    outputs:
      artifact: docker-images-ci
      secrets: secret-files
    steps:

      # Speed up build process with Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Need Makefile for pull
      - name: Download code from repository
        uses: actions/checkout@v4


      # 1. Start from a checkpoint to speed up the build process.
      # Automatically retagged as "dev"
      - name: Pull last successful Docker images
        run: |
          echo "üîπ Trying private GHCR images..."
          if make docker-pull-dev; then
            make docker-retag-dev-local DEVTAG=${{ inputs.image-tag }}
            echo "‚úÖ Pulled from private namespace."
          else
            echo "‚ö†Ô∏è Private pull failed, trying public images..."
            if make docker-pull; then
              echo "‚úÖ Pulled from public namespace."
            else
              echo "üö´ No cached images found ‚Äî continuing with rebuild."
            fi
          fi


      # 2. Set up environment with required files
      - name: Create secrets files with fake credentials
        run: |
          make env-dummy OUT=".env"
          make appsettings-dummy OUT="web-app/BlazorApp/appsettings.json" ENVF=".env"

      - name: Upload dummy secrets artifact
        uses: actions/upload-artifact@v4
        with:
          name: secret-files
          path: |
            ./.env
            ./web-app/BlazorApp/appsettings.json
          retention-days: 1

      
      # 3. Update the local Docker images with latest code
      # This creates the images with baked-in .env and appsettings.json files.
      # gha = GitHub Actions, matches ANY suitable image layer regardless of image name.
      - name: Build new Docker images
        run: make docker-build-dev CACHE_ARGS="--cache-from type=gha --cache-to type=gha,mode=max"

      - name: Save Docker images to tarball
        run: |
          docker save -o docker-images-ci.tar \
            dsci-cap-img-python-dev:latest \
            dsci-cap-img-blazor-dev:latest

      # 4. Send these images over to the main CI/CD workflow
      # Faster than uploading + downloading with GHCR
      - name: Upload images artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-ci
          path: docker-images-ci.tar
          retention-days: 1


